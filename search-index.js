var searchIndex = {};
searchIndex["tokio"] = {"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"clock","tokio","A configurable source of time.",null,null],[5,"now","tokio::clock","Returns an `Instant` corresponding to \"now\".",null,{"o":{"n":"instant"}}],[0,"executor","tokio","Task execution utilities.",null,null],[8,"Executor","tokio::executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",0,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",0,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[3,"Spawn","","Return value from the `spawn` function.",null,null],[5,"spawn","","Spawns a future on the default executor.",null,{"i":[{"n":"f"}],"o":{"n":"spawn"}}],[0,"thread_pool","","Re-exports of [`tokio-threadpool`], deprecated in favor of the crate.",null,null],[3,"Builder","tokio::executor::thread_pool","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[11,"fmt","tokio::executor","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_future","","",1,null],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",null,null],[5,"create_dir","tokio::fs","Creates a new, empty directory at the provided path",null,{"i":[{"n":"p"}],"o":{"n":"createdirfuture"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",null,{"i":[{"n":"p"}],"o":{"n":"createdirallfuture"}}],[0,"file","","Types for working with [`File`].",null,null],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(Metadata, File)` instance.",null,null],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"SeekFuture","","Future returned by `File::seek`.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[5,"hard_link","tokio::fs","Creates a new hard link on the filesystem.",null,{"i":[{"n":"p"},{"n":"q"}],"o":{"n":"hardlinkfuture"}}],[5,"metadata","","Queries the file system metadata for a path.",null,{"i":[{"n":"p"}],"o":{"n":"metadatafuture"}}],[0,"os","","OS-specific functionality.",null,null],[0,"unix","tokio::fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",null,null],[5,"symlink","tokio::fs::os::unix","Creates a new symbolic link on the filesystem.",null,{"i":[{"n":"p"},{"n":"q"}],"o":{"n":"symlinkfuture"}}],[3,"SymlinkFuture","","Future returned by `symlink`.",null,null],[5,"read_dir","tokio::fs","Returns a stream over the entries within a directory.",null,{"i":[{"n":"p"}],"o":{"n":"readdirfuture"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"i":[{"n":"p"}],"o":{"n":"readlinkfuture"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"i":[{"n":"p"}],"o":{"n":"removedirfuture"}}],[5,"remove_file","","Removes a file from the filesystem.",null,{"i":[{"n":"p"}],"o":{"n":"removefilefuture"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",null,{"i":[{"n":"p"},{"n":"q"}],"o":{"n":"renamefuture"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"i":[{"n":"p"},{"n":"permissions"}],"o":{"n":"setpermissionsfuture"}}],[5,"symlink_metadata","","Queries the file system metadata for a path.",null,{"i":[{"n":"p"}],"o":{"n":"symlinkmetadatafuture"}}],[3,"File","","A reference to an open file on the filesystem.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[0,"net","tokio","TCP/UDP/Unix bindings for `tokio`.",null,null],[3,"TcpListener","tokio::net","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",null,null],[3,"UnixStream","","A structure representing a connected Unix socket.",null,null],[0,"tcp","","TCP bindings for `tokio`.",null,null],[3,"ConnectFuture","tokio::net::tcp","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[0,"udp","tokio::net","UDP bindings for `tokio`.",null,null],[3,"RecvDgram","tokio::net::udp","A future used to receive a datagram from a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[0,"unix","tokio::net","Unix domain socket bindings for `tokio` (only available on unix systems).",null,null],[3,"ConnectFuture","tokio::net::unix","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",null,null],[3,"Incoming","","Stream of listeners",null,null],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",null,null],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",null,null],[3,"UCred","","Credentials of a process",null,null],[12,"uid","","UID (user ID) of the process",2,null],[12,"gid","","GID (group ID) of the process",2,null],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",null,null],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",null,null],[3,"UnixStream","","A structure representing a connected Unix socket.",null,null],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",null,null],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Background","","Handle to the reactor running on a background thread.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",null,null],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",null,null],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",null,null],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",null,null],[3,"TaskExecutor","","Executes futures on the runtime",null,null],[3,"Runtime","","Handle to the Tokio runtime.",null,null],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",null,{"i":[{"n":"f"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",3,{"o":{"n":"builder"}}],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",3,{"i":[{"n":"self"},{"n":"clock"}],"o":{"n":"self"}}],[11,"threadpool_builder","","Set builder to set up the thread pool instance.",3,{"i":[{"n":"self"},{"n":"threadpoolbuilder"}],"o":{"n":"self"}}],[11,"build","","Create the configured `Runtime`.",3,{"i":[{"n":"self"}],"o":{"g":["runtime"],"n":"result"}}],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",null,null],[5,"spawn","tokio::runtime::current_thread","Executes a future on the current thread.",null,null],[3,"Builder","","Builds a Single-threaded runtime with custom configuration values.",null,null],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",null,null],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",null,null],[5,"block_on_all","","Run the provided future to completion using a runtime running on the current thread.",null,{"i":[{"n":"f"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",4,{"o":{"n":"builder"}}],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",4,{"i":[{"n":"self"},{"n":"clock"}],"o":{"n":"self"}}],[11,"build","","Create the configured `Runtime`.",4,{"i":[{"n":"self"}],"o":{"g":["runtime"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"new","","Returns a new runtime initialized with default configuration values.",5,{"o":{"g":["runtime"],"n":"result"}}],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",5,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",5,{"i":[{"n":"self"}],"o":{"g":["runerror"],"n":"result"}}],[11,"poll","tokio::runtime","",7,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",8,{"i":[{"n":"self"},{"n":"f"}]}],[11,"execute","","",8,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["executeerror"],"n":"result"}}],[11,"spawn","","",8,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new runtime instance with default configuration values.",9,{"o":{"n":"result"}}],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",9,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"executor","","Return a handle to the runtime's executor.",9,{"i":[{"n":"self"}],"o":{"n":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"block_on","","Run a future to completion on the Tokio runtime.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"block_on_all","","Run a future to completion on the Tokio runtime, then wait for all background futures to complete too.",9,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"result"}}],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",9,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",9,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"drop","","",9,{"i":[{"n":"self"}]}],[0,"timer","tokio","Utilities for tracking time.",null,null],[0,"delay_queue","tokio::timer","A queue of delayed elements.",null,null],[3,"DelayQueue","tokio::timer::delay_queue","A queue of delayed elements.",null,null],[3,"Expired","","An entry in `DelayQueue` that has expired and removed.",null,null],[3,"Key","","Token to a value stored in a `DelayQueue`.",null,null],[3,"DelayQueue","tokio::timer","A queue of delayed elements.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[3,"Timeout","","Allows a `Future` or `Stream` to execute for a limited amount of time.",null,null],[0,"timeout","","Allows a future or stream to execute for a maximum amount of time.",null,null],[3,"Timeout","tokio::timer::timeout","Allows a `Future` or `Stream` to execute for a limited amount of time.",null,null],[3,"Error","","Error returned by `Timeout`.",null,null],[0,"util","tokio","Utilities for working with Tokio.",null,null],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"timeout","","Creates a new future which allows `self` until `timeout`.",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timeout"}}],[0,"codec","tokio","Utilities for encoding and decoding frames.",null,null],[8,"Decoder","tokio::codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",11,null],[16,"Error","","The type of unrecoverable frame decoding errors.",11,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",11,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option"],"n":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",11,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option"],"n":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",11,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"framed"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",12,null],[16,"Error","","The type of encoding errors.",12,null],[10,"encode","","Encodes a frame into the buffer provided.",12,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",null,null],[12,"io","","The inner transport used to read bytes to and write bytes to",13,null],[12,"codec","","The codec",13,null],[12,"read_buf","","The buffer with read but unprocessed data.",13,null],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",13,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",null,null],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",null,null],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",null,null],[0,"length_delimited","","Frame a stream of bytes based on a length prefix",null,null],[3,"Builder","tokio::codec::length_delimited","Configure length delimited `LengthDelimitedCodec`s.",null,null],[3,"FrameTooBig","","An error when the number of bytes read is more than max frame length.",null,null],[3,"LengthDelimitedCodec","","A codec for frames delimited by a frame head specifying their lengths.",null,null],[0,"io","tokio","Asynchronous I/O.",null,null],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",14,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",14,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",14,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",14,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",15,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",15,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",15,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",15,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"o":{"n":"stdin"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"o":{"n":"stdout"}}],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"o":{"n":"stderr"}}],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"i":[{"n":"r"},{"n":"w"}],"o":{"n":"copy"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"i":[{"n":"a"}],"o":{"n":"flush"}}],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"i":[{"n":"a"}],"o":{"n":"lines"}}],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"i":[{"n":"a"},{"n":"t"}],"o":{"n":"readexact"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"i":[{"n":"a"},{"g":["u8"],"n":"vec"}],"o":{"n":"readtoend"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"i":[{"n":"a"},{"n":"u8"},{"g":["u8"],"n":"vec"}],"o":{"n":"readuntil"}}],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"i":[{"n":"a"}],"o":{"n":"shutdown"}}],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"i":[{"n":"a"},{"n":"t"}],"o":{"n":"writeall"}}],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",16,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",16,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",16,null],[13,"ConnectionReset","","The connection was reset by the remote server.",16,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",16,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",16,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",16,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",16,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",16,null],[13,"AlreadyExists","","An entity already exists, often a file.",16,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",16,null],[13,"InvalidInput","","A parameter was incorrect.",16,null],[13,"InvalidData","","Data not valid for the operation were encountered.",16,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",16,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",16,null],[13,"Interrupted","","This operation was interrupted.",16,null],[13,"Other","","Any I/O error not part of this list.",16,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",16,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",17,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",17,{"i":[{"n":"self"}],"o":{"n":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",17,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",17,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",17,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",17,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",17,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",17,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",18,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",18,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",18,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"g":["error"],"n":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",null,null],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",14,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",14,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",14,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",14,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",14,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",15,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",15,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",15,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",15,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",17,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",17,{"i":[{"n":"self"}],"o":{"n":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",17,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",17,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",17,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",17,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",17,{"i":[{"n":"self"}],"o":{"n":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",17,{"i":[{"n":"self"}],"o":{"n":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",17,{"i":[{"n":"self"},{"n":"r"}],"o":{"n":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",17,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",18,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",18,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",18,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",18,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"g":["error"],"n":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",18,{"i":[{"n":"self"}],"o":{"n":"self"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",19,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",19,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",19,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",19,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",19,{"i":[{"n":"self"}],"o":{"n":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",19,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",19,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",19,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",19,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",19,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",19,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",19,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",19,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",19,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[0,"future","","Futures",null,null],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",19,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",19,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",19,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",19,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",19,{"i":[{"n":"self"}],"o":{"n":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",19,{"i":[{"n":"self"},{"n":"b"}],"o":{"n":"join"}}],[11,"join3","","Same as `join`, but with more futures.",19,{"i":[{"n":"self"},{"n":"b"},{"n":"c"}],"o":{"n":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",19,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"}],"o":{"n":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",19,{"i":[{"n":"self"},{"n":"b"},{"n":"c"},{"n":"d"},{"n":"e"}],"o":{"n":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",19,{"i":[{"n":"self"}],"o":{"n":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",19,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",19,{"i":[{"n":"self"}],"o":{"n":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",19,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",19,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",19,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",19,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",20,null],[16,"Item","","The item that the future may resolve with.",20,null],[16,"Error","","The error that the future may resolve with.",20,null],[10,"into_future","","Consumes this object and produces a future.",20,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",21,null],[16,"Error","","Possible errors during conversion.",21,null],[10,"future_from","","Consume the given value, beginning the conversion.",21,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",22,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["executeerror"],"n":"result"}}],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",23,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",23,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"i":[{"n":"f"}],"o":{"n":"pollfn"}}],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Err","","A future representing a value that is immediately ready.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"i":[{"n":"i"}],"o":{"n":"joinall"}}],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",24,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",24,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"i":[{"n":"s"},{"n":"f"}],"o":{"n":"loopfn"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"i":[{"n":"i"}],"o":{"n":"selectall"}}],[3,"Empty","","A future which is never resolved.",null,null],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"i":[{"n":"e"}],"o":{"n":"futureresult"}}],[3,"Collect","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"o":{"n":"empty"}}],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"i":[{"n":"result"}],"o":{"n":"futureresult"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"i":[{"n":"f"}],"o":{"n":"lazy"}}],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",25,null],[13,"B","","Second branch of the type",25,null],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"i":[{"n":"t"}],"o":{"n":"futureresult"}}],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"i":[{"n":"i"}],"o":{"n":"selectok"}}],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",26,null],[16,"Error","","The type of error this stream may generate.",26,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",26,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",26,{"i":[{"n":"self"}],"o":{"n":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",26,{"i":[{"n":"self"}],"o":{"n":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",26,{"i":[{"n":"self"}],"o":{"n":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",26,{"i":[{"n":"self"}],"o":{"n":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",26,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",26,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",26,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",26,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",26,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",26,{"i":[{"n":"self"}],"o":{"n":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",26,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",26,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",26,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"zip"}}],[11,"chain","","Adapter for chaining two stream.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",26,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",26,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[0,"stream","","Asynchronous streams",null,null],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",null,null],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",26,null],[16,"Error","","The type of error this stream may generate.",26,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",26,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",26,{"i":[{"n":"self"}],"o":{"n":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",26,{"i":[{"n":"self"}],"o":{"n":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",26,{"i":[{"n":"self"}],"o":{"n":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",26,{"i":[{"n":"self"}],"o":{"n":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",26,{"i":[{"n":"self"}],"o":{"n":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",26,{"i":[{"n":"self"},{"n":"t"},{"n":"f"}],"o":{"n":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",26,{"i":[{"n":"self"}],"o":{"n":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",26,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",26,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",26,{"i":[{"n":"self"}],"o":{"n":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",26,{"i":[{"n":"self"},{"n":"u64"}],"o":{"n":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",26,{"i":[{"n":"self"}],"o":{"n":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",26,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",26,{"i":[{"n":"self"}],"o":{"n":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"zip"}}],[11,"chain","","Adapter for chaining two stream.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",26,{"i":[{"n":"self"}],"o":{"n":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",26,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",26,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",26,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",26,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"inspecterr"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"i":[{"n":"i"}],"o":{"n":"futuresunordered"}}],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"i":[{"n":"i"}],"o":{"n":"futuresordered"}}],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"i":[{"n":"f"}],"o":{"n":"pollfn"}}],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",27,null],[12,"1","","",27,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"i":[{"n":"t"},{"n":"f"}],"o":{"n":"unfold"}}],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"i":[{"n":"i"}],"o":{"n":"iterok"}}],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"Iter","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"i":[{"n":"j"}],"o":{"n":"iter"}}],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[5,"empty","","Creates a stream which contains no elements.",null,{"o":{"n":"empty"}}],[5,"once","","Creates a stream of single element",null,{"i":[{"n":"result"}],"o":{"n":"once"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"i":[{"n":"t"}],"o":{"n":"repeat"}}],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"i":[{"n":"j"}],"o":{"n":"iterresult"}}],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Sender","","The transmission end of a channel which is used to send values.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",28,null],[13,"Second","","An item from the second stream",28,null],[13,"Both","","Items from both streams",28,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"FutureSender","","Future returned by `Sender::send`.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",29,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",29,null],[10,"start_send","","Begin the process of sending a value to the sink.",29,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",29,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",29,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",29,{"i":[{"n":"self"}],"o":{"n":"wait"}}],[11,"with","","Composes a function in front of the sink.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",29,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",29,{"i":[{"n":"self"}],"o":{"n":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",29,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",29,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",29,{"i":[{"n":"self"}],"o":{"n":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",29,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",29,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"sendall"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",20,null],[16,"Item","","The item that the future may resolve with.",20,null],[16,"Error","","The error that the future may resolve with.",20,null],[10,"into_future","","Consumes this object and produces a future.",20,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",30,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",30,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",31,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",31,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"task","","Tasks used to drive a future computation",null,null],[5,"spawn","tokio::prelude::task","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"i":[{"n":"t"}],"o":{"n":"spawn"}}],[3,"Spawn","","Representation of a spawned future/stream.",null,null],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",32,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",33,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"i":[{"n":"unparkevent"},{"n":"f"}],"o":{"n":"r"}}],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",34,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"o":{"n":"task"}}],[5,"init","","Initialize the `futures` task system.",null,null],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"timeout","tokio::util","Creates a new future which allows `self` until `timeout`.",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timeout"}}],[11,"eq","tokio::io","",16,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"bool"}}],[11,"hash","","",16,null],[11,"cmp","","",16,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"n":"ordering"}}],[11,"clone","","",16,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","","",35,{"i":[{"n":"intoinnererror"}],"o":{"n":"error"}}],[11,"from","","",35,{"i":[{"n":"errorkind"}],"o":{"n":"error"}}],[11,"from","","",35,{"i":[{"n":"nulerror"}],"o":{"n":"error"}}],[11,"description","","",35,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",35,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"partial_cmp","","",16,{"i":[{"n":"self"},{"n":"errorkind"}],"o":{"g":["ordering"],"n":"option"}}],[11,"fmt","","",35,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from_iter","tokio::prelude::stream","",36,{"i":[{"n":"t"}],"o":{"n":"futuresordered"}}],[11,"from_iter","tokio::prelude::stream::futures_unordered","",37,{"i":[{"n":"t"}],"o":{"n":"futuresunordered"}}],[11,"clone","tokio::prelude::future","",38,{"i":[{"n":"self"}],"o":{"n":"shared"}}],[11,"clone","tokio::prelude::task","",39,{"i":[{"n":"self"}],"o":{"n":"unparkevent"}}],[11,"clone","tokio::prelude::future","",40,{"i":[{"n":"self"}],"o":{"n":"futureresult"}}],[11,"clone","","",23,{"i":[{"n":"self"}],"o":{"n":"executeerrorkind"}}],[11,"clone","","",41,{"i":[{"n":"self"}],"o":{"n":"shareditem"}}],[11,"clone","tokio::prelude::task","",42,{"i":[{"n":"self"}],"o":{"n":"taskrc"}}],[11,"clone","","",43,{"i":[{"n":"self"}],"o":{"n":"task"}}],[11,"clone","tokio::prelude","",30,{"i":[{"n":"self"}],"o":{"n":"async"}}],[11,"clone","","",31,{"i":[{"n":"self"}],"o":{"n":"asyncsink"}}],[11,"clone","tokio::prelude::future","",44,{"i":[{"n":"self"}],"o":{"n":"sharederror"}}],[11,"eq","tokio::prelude","",30,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"ne","","",30,{"i":[{"n":"self"},{"n":"async"}],"o":{"n":"bool"}}],[11,"eq","tokio::prelude::future","",23,{"i":[{"n":"self"},{"n":"executeerrorkind"}],"o":{"n":"bool"}}],[11,"eq","tokio::prelude","",31,{"i":[{"n":"self"},{"n":"asyncsink"}],"o":{"n":"bool"}}],[11,"ne","","",31,{"i":[{"n":"self"},{"n":"asyncsink"}],"o":{"n":"bool"}}],[11,"poll","tokio::prelude::future","",45,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",46,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",47,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",48,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",49,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",50,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",51,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",52,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",53,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",54,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",38,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",55,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",56,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",57,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",58,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",59,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",60,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",61,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",62,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",25,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",63,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",64,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",65,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",66,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",67,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",68,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",69,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",70,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",71,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",72,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",73,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",74,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",40,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",75,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",76,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"start_send","","",78,null],[11,"poll_complete","","",78,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",78,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",79,null],[11,"poll_complete","","",79,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",79,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",80,null],[11,"poll_complete","","",80,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",80,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",81,null],[11,"poll_complete","","",81,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",81,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",82,null],[11,"poll_complete","","",82,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",82,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",83,null],[11,"poll_complete","","",83,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",83,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",84,null],[11,"poll_complete","","",84,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",84,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",85,null],[11,"poll_complete","","",85,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",85,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",86,null],[11,"poll_complete","","",86,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",86,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",87,null],[11,"poll_complete","","",87,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",87,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",88,null],[11,"poll_complete","","",88,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",88,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",89,null],[11,"poll_complete","","",89,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",89,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",90,null],[11,"poll_complete","","",90,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",90,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",91,null],[11,"poll_complete","","",91,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",91,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",92,null],[11,"poll_complete","","",92,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",92,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",93,null],[11,"poll_complete","","",93,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",93,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",94,null],[11,"poll_complete","","",94,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",94,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",95,null],[11,"poll_complete","","",95,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",95,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",96,null],[11,"poll_complete","","",96,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",96,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",97,null],[11,"poll_complete","","",97,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",97,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",98,null],[11,"poll_complete","","",98,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",98,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"from","tokio::prelude::future","",40,{"i":[{"n":"result"}],"o":{"n":"futureresult"}}],[11,"from","tokio::prelude","",30,{"i":[{"n":"t"}],"o":{"n":"async"}}],[11,"poll","tokio::prelude::stream","",79,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",99,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",85,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",100,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",101,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",93,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",95,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",102,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",103,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",104,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",105,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",83,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",82,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",106,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",107,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",108,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",89,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",109,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",110,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",36,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",94,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",98,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",111,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",81,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",78,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",86,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",88,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",112,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",92,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",90,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::future","",113,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",80,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",96,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",97,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",114,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",115,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream::futures_unordered","",37,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::prelude::stream","",87,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",91,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"drop","tokio::prelude::stream::futures_unordered","",37,null],[11,"drop","tokio::prelude::future","",38,null],[11,"description","tokio::prelude::stream","",77,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","tokio::prelude::future","",44,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"cause","","",44,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","tokio::prelude::stream","",27,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"next","tokio::prelude::stream::futures_unordered","",116,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"size_hint","","",116,null],[11,"next","tokio::prelude::stream","",117,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"deref","tokio::prelude::future","",41,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"deref","","",44,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"fmt","tokio::prelude::stream","",82,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",54,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream::futures_unordered","",37,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::task","",118,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",53,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",23,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",107,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::task","",42,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",50,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",111,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude","",31,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",92,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",56,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",51,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",85,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",46,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",69,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",63,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::task","",43,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",39,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",80,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",44,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::task","",119,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",96,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",24,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",77,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",40,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",86,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",98,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream::futures_unordered","",116,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::task","",120,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",65,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",78,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",97,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",121,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",105,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",112,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",67,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",41,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",114,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",88,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",49,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",117,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",79,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",68,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",113,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",76,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",94,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude","",30,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",25,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",58,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",103,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",73,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",84,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",62,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",122,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",75,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",59,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",74,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",27,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",61,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",36,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",48,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",108,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",95,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",28,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",90,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",38,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",115,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",72,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",104,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",87,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",70,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",47,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",60,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",83,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",91,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",89,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",81,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",64,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",52,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",100,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",71,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",109,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",102,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",101,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",93,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",57,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",110,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",45,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",66,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::task","",123,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::future","",55,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::prelude::stream","",106,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",99,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"default","tokio::prelude::task","",123,{"o":{"n":"atomictask"}}],[11,"fmt","tokio::executor","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",125,{"i":[{"n":"self"}],"o":{"n":"defaultexecutor"}}],[11,"description","","",124,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"spawn","","",125,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","",125,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"fmt","","",125,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",124,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"start_send","tokio::codec","",126,null],[11,"poll_complete","","",126,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",126,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",127,null],[11,"poll_complete","","",127,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",127,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",128,null],[11,"poll_complete","","",128,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",128,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"write","tokio::io","",129,null],[11,"flush","","",129,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",130,null],[11,"shutdown","","",129,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"write_buf","","",129,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"read_buf","","",130,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","tokio::codec","",127,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",126,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::io","",131,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","tokio::codec","",128,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::io","",132,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",133,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",134,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",135,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",136,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",137,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",138,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"fmt","","",138,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",136,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::codec","",128,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::io","",135,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",131,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",130,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::codec","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::io","",129,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",134,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",137,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::codec","",127,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::io","",133,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",132,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::codec","",126,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"eq","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"ne","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"eq","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"ne","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"decode","","",140,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option","error"],"n":"result"}}],[11,"decode","","",139,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option","error"],"n":"result"}}],[11,"decode_eof","","",139,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option","error"],"n":"result"}}],[11,"clone","","",139,{"i":[{"n":"self"}],"o":{"n":"linescodec"}}],[11,"clone","","",140,{"i":[{"n":"self"}],"o":{"n":"bytescodec"}}],[11,"partial_cmp","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"le","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"gt","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"ge","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"partial_cmp","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"le","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"gt","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"ge","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"encode","","",139,{"i":[{"n":"self"},{"n":"string"},{"n":"bytesmut"}],"o":{"g":["error"],"n":"result"}}],[11,"encode","","",140,{"i":[{"n":"self"},{"n":"bytes"},{"n":"bytesmut"}],"o":{"g":["error"],"n":"result"}}],[11,"cmp","","",139,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"ordering"}}],[11,"cmp","","",140,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"ordering"}}],[11,"hash","","",139,null],[11,"hash","","",140,null],[11,"fmt","","",140,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",139,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","tokio::fs","",141,null],[11,"from","","",142,{"i":[{"n":"openoptions"}],"o":{"n":"openoptions"}}],[11,"write","","",141,null],[11,"flush","","",141,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"write","tokio::io","",143,null],[11,"flush","","",143,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"write","","",144,null],[11,"flush","","",144,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",145,null],[11,"read","tokio::fs","",141,null],[11,"poll","tokio::fs::os::unix","",146,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::fs::file","",147,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",148,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",149,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",150,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"clone","tokio::fs","",142,{"i":[{"n":"self"}],"o":{"n":"openoptions"}}],[11,"shutdown","","",141,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"shutdown","tokio::io","",144,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"shutdown","","",143,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"fmt","tokio::fs::file","",148,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::fs","",141,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::fs::file","",147,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",150,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",149,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::fs::os::unix","",146,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::io","",145,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",144,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::fs","",142,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::io","",143,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"prepare_uninitialized_buffer","","",145,null],[11,"prepare_uninitialized_buffer","tokio::fs","",141,null],[11,"drop","tokio::executor::thread_pool","",151,null],[11,"execute","","",152,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["executeerror"],"n":"result"}}],[11,"clone","","",152,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"status","","",152,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"spawn","","",152,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"poll","","",153,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","","",152,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",153,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",154,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",151,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"from","tokio::io","",35,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"fmt","tokio::reactor","",155,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",156,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",157,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",158,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",159,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",160,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"drop","","",160,null],[11,"drop","","",155,null],[11,"unpark","","",159,null],[11,"unpark","","",158,null],[11,"park","","",158,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"park_timeout","","",158,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["error"],"n":"result"}}],[11,"write","","",155,null],[11,"flush","","",155,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",155,null],[11,"clone","","",159,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",159,{"o":{"n":"handle"}}],[11,"shutdown","","",155,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","tokio::timer","",161,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",162,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","tokio::timer::timeout","",163,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::timer","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"description","","",165,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"description","tokio::timer::timeout","",164,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"poll","","",163,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","tokio::timer","",166,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","","",162,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::timer::timeout","",163,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::timer::delay_queue","",167,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::timer","",165,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::timer::timeout","",164,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::timer","",161,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",166,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","tokio::timer::delay_queue","",168,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"write","tokio::net::tcp","",169,null],[11,"flush","","",169,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",169,null],[11,"as_raw_fd","","",170,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"as_raw_fd","","",169,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"poll","","",171,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",172,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"shutdown","","",169,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"write_buf","","",169,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"fmt","","",169,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",170,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",171,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",172,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"prepare_uninitialized_buffer","","",169,null],[11,"read_buf","","",169,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"as_raw_fd","tokio::net::udp","",173,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"poll","","",174,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",175,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",176,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"start_send","","",174,null],[11,"poll_complete","","",174,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",174,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","","",174,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",176,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",175,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",173,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"write","tokio::net::unix","",177,null],[11,"flush","","",177,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"read","","",177,null],[11,"eq","","",2,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"ne","","",2,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"shutdown","","",177,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"write_buf","","",177,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"as_raw_fd","","",177,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"as_raw_fd","","",178,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"as_raw_fd","","",179,{"i":[{"n":"self"}],"o":{"n":"i32"}}],[11,"prepare_uninitialized_buffer","","",177,null],[11,"read_buf","","",177,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["async","error"],"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"poll","","",180,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll","","",181,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",182,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",183,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"hash","","",2,null],[11,"fmt","","",180,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",182,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",181,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",183,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",179,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",177,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",178,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",125,{"o":{"n":"defaultexecutor"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",124,{"o":{"n":"spawnerror"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",124,{"o":{"n":"spawnerror"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",124,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",124,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","tokio::executor::thread_pool","Returns a new thread pool builder initialized with default configuration values.",154,{"o":{"n":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",154,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"builder"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",154,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"builder"}}],[11,"keep_alive","","Set the worker thread keep alive duration",154,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"builder"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",154,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"builder"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",154,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"builder"}}],[11,"around_worker","","Execute function `f` on each worker thread.",154,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"builder"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",154,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"builder"}}],[11,"before_stop","","Execute function `f` before each thread stops.",154,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"builder"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",154,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"builder"}}],[11,"build","","Create the configured `ThreadPool`.",154,{"i":[{"n":"self"}],"o":{"n":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool",152,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",151,{"o":{"n":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",151,null],[11,"spawn_handle","","Spawn a future on to the thread pool, return a future representing  the produced value.",151,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"spawnhandle"}}],[11,"sender","","Return a reference to the sender handle",151,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",151,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",151,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"shutdown","","Shutdown the pool",151,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",151,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",141,{"i":[{"n":"p"}],"o":{"n":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",141,{"i":[{"n":"p"}],"o":{"n":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",141,{"i":[{"n":"self"},{"n":"seekfrom"}],"o":{"g":["async","error"],"n":"result"}}],[11,"seek","","Seek to an offset, in bytes, in a stream.",141,{"i":[{"n":"self"},{"n":"seekfrom"}],"o":{"n":"seekfuture"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",141,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",141,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",141,{"i":[{"n":"self"},{"n":"u64"}],"o":{"g":["async","error"],"n":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",141,{"i":[{"n":"self"}],"o":{"n":"metadatafuture"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",141,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",141,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",141,{"i":[{"n":"self"},{"n":"permissions"}],"o":{"g":["async","error"],"n":"result"}}],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",141,{"i":[{"n":"self"}],"o":{"n":"file"}}],[11,"new","","Creates a blank new set of options ready for configuration.",142,{"o":{"n":"openoptions"}}],[11,"read","","See the underlying [`read`] call for details.",142,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"write","","See the underlying [`write`] call for details.",142,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"append","","See the underlying [`append`] call for details.",142,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"truncate","","See the underlying [`truncate`] call for details.",142,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"create","","See the underlying [`create`] call for details.",142,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"create_new","","See the underlying [`create_new`] call for details.",142,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",142,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"openfuture"}}],[11,"bind","tokio::net::tcp","Create a new TCP listener associated with this event loop.",170,{"i":[{"n":"socketaddr"}],"o":{"g":["tcplistener","error"],"n":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",170,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",170,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",170,{"i":[{"n":"tcplistener"},{"n":"handle"}],"o":{"g":["tcplistener","error"],"n":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",170,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",170,{"i":[{"n":"self"}],"o":{"n":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",170,{"i":[{"n":"self"}],"o":{"g":["u32","error"],"n":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",170,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["error"],"n":"result"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",169,{"i":[{"n":"socketaddr"}],"o":{"n":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",169,{"i":[{"n":"tcpstream"},{"n":"handle"}],"o":{"g":["tcpstream","error"],"n":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",169,{"i":[{"n":"tcpstream"},{"n":"socketaddr"},{"n":"handle"}],"o":{"n":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",169,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",169,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",169,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",169,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",169,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",169,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"g":["error"],"n":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",169,{"i":[{"n":"self"}],"o":{"g":["bool","error"],"n":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",169,{"i":[{"n":"self"},{"n":"bool"}],"o":{"g":["error"],"n":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",169,{"i":[{"n":"self"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",169,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["error"],"n":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",169,{"i":[{"n":"self"}],"o":{"g":["usize","error"],"n":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",169,{"i":[{"n":"self"},{"n":"usize"}],"o":{"g":["error"],"n":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",169,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",169,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["error"],"n":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",169,{"i":[{"n":"self"}],"o":{"g":["u32","error"],"n":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",169,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["error"],"n":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",169,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",169,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["error"],"n":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",169,{"i":[{"n":"self"}],"o":{"g":["tcpstream","error"],"n":"result"}}],[11,"new","tokio::net::udp","Create a new `UdpFramed` backed by the given socket and codec.",174,{"i":[{"n":"udpsocket"},{"n":"c"}],"o":{"n":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",174,{"i":[{"n":"self"}],"o":{"n":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",174,{"i":[{"n":"self"}],"o":{"n":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",174,{"i":[{"n":"self"}],"o":{"n":"udpsocket"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",173,{"i":[{"n":"socketaddr"}],"o":{"g":["udpsocket","error"],"n":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",173,{"i":[{"n":"udpsocket"},{"n":"handle"}],"o":{"g":["udpsocket","error"],"n":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",173,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",173,{"i":[{"n":"self"},{"n":"socketaddr"}],"o":{"g":["error"],"n":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",173,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",173,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",173,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",173,{"i":[{"n":"self"},{"n":"t"},{"n":"socketaddr"}],"o":{"n":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",173,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",173,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"recvdgram"}}],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",173,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",173,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",173,{"i":[{"n":"self"}],"o":{"g":["bool","error"],"n":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",173,{"i":[{"n":"self"},{"n":"bool"}],"o":{"g":["error"],"n":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",173,{"i":[{"n":"self"}],"o":{"g":["bool","error"],"n":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",173,{"i":[{"n":"self"},{"n":"bool"}],"o":{"g":["error"],"n":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",173,{"i":[{"n":"self"}],"o":{"g":["u32","error"],"n":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",173,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["error"],"n":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",173,{"i":[{"n":"self"}],"o":{"g":["bool","error"],"n":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",173,{"i":[{"n":"self"},{"n":"bool"}],"o":{"g":["error"],"n":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",173,{"i":[{"n":"self"}],"o":{"g":["u32","error"],"n":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",173,{"i":[{"n":"self"},{"n":"u32"}],"o":{"g":["error"],"n":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",173,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"g":["error"],"n":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",173,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"g":["error"],"n":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",173,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"g":["error"],"n":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",173,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"g":["error"],"n":"result"}}],[11,"bind","tokio::net::unix","Creates a new `UnixListener` bound to the specified path.",179,{"i":[{"n":"p"}],"o":{"g":["unixlistener","error"],"n":"result"}}],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",179,{"i":[{"n":"unixlistener"},{"n":"handle"}],"o":{"g":["unixlistener","error"],"n":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",179,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",179,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["async","error"],"n":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",179,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",179,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",179,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",179,{"i":[{"n":"self"}],"o":{"n":"incoming"}}],[11,"connect","","Connects to the socket named by `path`.",177,{"i":[{"n":"p"}],"o":{"n":"connectfuture"}}],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",177,{"i":[{"n":"unixstream"},{"n":"handle"}],"o":{"g":["unixstream","error"],"n":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",177,{"o":{"g":["error"],"n":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",177,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",177,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",177,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",177,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",177,{"i":[{"n":"self"}],"o":{"g":["ucred","error"],"n":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",177,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",177,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"g":["error"],"n":"result"}}],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",178,{"i":[{"n":"p"}],"o":{"g":["unixdatagram","error"],"n":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",178,{"o":{"g":["error"],"n":"result"}}],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",178,{"i":[{"n":"unixdatagram"},{"n":"handle"}],"o":{"g":["unixdatagram","error"],"n":"result"}}],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",178,{"o":{"g":["unixdatagram","error"],"n":"result"}}],[11,"connect","","Connects the socket to the specified address.",178,{"i":[{"n":"self"},{"n":"p"}],"o":{"g":["error"],"n":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",178,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["async","error"],"n":"result"}}],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",178,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",178,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",178,{"i":[{"n":"self"}],"o":{"g":["socketaddr","error"],"n":"result"}}],[11,"poll_recv_from","","Receives data from the socket.",178,null],[11,"poll_recv","","Receives data from the socket.",178,null],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",178,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"recvdgram"}}],[11,"poll_send_to","","Sends data on the socket to the specified address.",178,null],[11,"poll_send","","Sends data on the socket to the socket's peer.",178,null],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",178,{"i":[{"n":"self"},{"n":"t"},{"n":"p"}],"o":{"n":"senddgram"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",178,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",178,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"g":["error"],"n":"result"}}],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",158,{"o":{"g":["reactor","error"],"n":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",158,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",158,{"i":[{"n":"self"}],"o":{"g":["setfallbackerror"],"n":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",158,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["turn","error"],"n":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",158,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"background","","Run this reactor on a background thread.",158,{"i":[{"n":"self"}],"o":{"g":["background","error"],"n":"result"}}],[11,"current","","Returns a handle to the current reactor.",159,{"o":{"n":"handle"}}],[11,"handle","","Returns a reference to the reactor handle.",160,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",160,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",160,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",160,null],[11,"new","","Create a new `Registration`.",157,{"o":{"n":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",157,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["bool","error"],"n":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",157,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["error"],"n":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",157,{"i":[{"n":"self"},{"n":"t"},{"n":"handle"}],"o":{"g":["bool","error"],"n":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",157,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"take_read_ready","","Consume any pending read readiness event.",157,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",157,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"take_write_ready","","Consume any pending write readiness event.",157,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"result"}}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",155,{"i":[{"n":"e"}],"o":{"n":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",155,{"i":[{"n":"e"},{"n":"handle"}],"o":{"g":["pollevented","error"],"n":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",155,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",155,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",155,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",155,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["async","error"],"n":"result"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",155,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["error"],"n":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",155,{"i":[{"n":"self"}],"o":{"g":["async","error"],"n":"result"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",155,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"result"}}],[11,"new","tokio::timer","Create a new, empty, `DelayQueue`",162,{"o":{"n":"delayqueue"}}],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",162,{"i":[{"n":"usize"},{"n":"handle"}],"o":{"n":"delayqueue"}}],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",162,{"i":[{"n":"usize"}],"o":{"n":"delayqueue"}}],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",162,{"i":[{"n":"self"},{"n":"t"},{"n":"instant"}],"o":{"n":"key"}}],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",162,{"i":[{"n":"self"},{"n":"t"},{"n":"duration"}],"o":{"n":"key"}}],[11,"remove","","Remove the item associated with `key` from the queue.",162,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"expired"}}],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",162,null],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",162,null],[11,"clear","","Clears the queue, removing all items.",162,null],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",162,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",162,null],[11,"is_empty","","Returns `true` if there are no items in the queue.",162,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_ref","tokio::timer::delay_queue","Returns a reference to the inner value.",167,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value.",167,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes `self` and returns the inner value.",167,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"shutdown","tokio::timer","Create an error representing a shutdown timer.",165,{"o":{"n":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",165,{"o":{"n":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",165,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",161,{"i":[{"n":"instant"},{"n":"duration"}],"o":{"n":"interval"}}],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",161,{"i":[{"n":"duration"}],"o":{"n":"interval"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",166,{"i":[{"n":"instant"}],"o":{"n":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",166,{"i":[{"n":"self"}],"o":{"n":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",166,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",166,null],[11,"new","tokio::timer::timeout","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",163,{"i":[{"n":"t"},{"n":"duration"}],"o":{"n":"timeout"}}],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",163,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",163,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes this timeout, returning the underlying value.",163,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",163,{"i":[{"n":"t"},{"n":"instant"}],"o":{"n":"timeout"}}],[11,"inner","","Create a new `Error` representing the inner value completing with `Err`.",164,{"i":[{"n":"t"}],"o":{"n":"error"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",164,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",164,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",164,{"o":{"n":"error"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",164,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",164,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",164,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",164,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"timeout","tokio::util","Creates a new future which allows `self` until `timeout`.",10,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"timeout"}}],[11,"fmt","tokio::codec::length_delimited","",184,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",184,{"i":[{"n":"self"}],"o":{"n":"builder"}}],[11,"fmt","tokio::codec","",185,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `LengthDelimitedCodec` with the default configuration values.",185,{"o":{"n":"self"}}],[11,"max_frame_length","","Returns the current max frame setting",185,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_max_frame_length","","Updates the max frame setting.",185,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"decode","","",185,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option"],"n":"result"}}],[11,"encode","","",185,{"i":[{"n":"self"},{"n":"bytes"},{"n":"bytesmut"}],"o":{"g":["error"],"n":"result"}}],[11,"new","tokio::codec::length_delimited","Creates a new length delimited codec builder with default configuration values.",184,{"o":{"n":"builder"}}],[11,"big_endian","","Read the length field as a big endian integer",184,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"little_endian","","Read the length field as a little endian integer",184,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"native_endian","","Read the length field as a native endian integer",184,{"i":[{"n":"self"}],"o":{"n":"self"}}],[11,"max_frame_length","","Sets the max frame length",184,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"length_field_length","","Sets the number of bytes used to represent the length field",184,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"length_field_offset","","Sets the number of bytes in the header before the length field",184,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"length_adjustment","","Delta between the payload length specified in the header and the real payload length",184,{"i":[{"n":"self"},{"n":"isize"}],"o":{"n":"self"}}],[11,"num_skip","","Sets the number of bytes to skip before reading the payload",184,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"new_codec","","Create a configured length delimited `LengthDelimitedCodec`",184,{"i":[{"n":"self"}],"o":{"n":"lengthdelimitedcodec"}}],[11,"new_read","","Create a configured length delimited `FramedRead`",184,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["lengthdelimitedcodec"],"n":"framedread"}}],[11,"new_write","","Create a configured length delimited `FramedWrite`",184,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["lengthdelimitedcodec"],"n":"framedwrite"}}],[11,"new_framed","","Create a configured length delimited `Framed`",184,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["lengthdelimitedcodec"],"n":"framed"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",186,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",186,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","tokio::codec","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",127,{"i":[{"n":"t"},{"n":"u"}],"o":{"n":"framed"}}],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",127,{"i":[{"n":"framedparts"}],"o":{"n":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",127,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",127,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",127,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",127,{"i":[{"n":"self"}],"o":{"n":"framedparts"}}],[11,"new","","Create a new, default, `FramedParts`",13,{"i":[{"n":"t"},{"n":"u"}],"o":{"n":"framedparts"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",126,{"i":[{"n":"t"},{"n":"d"}],"o":{"n":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",126,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",126,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",126,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",126,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",126,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",128,{"i":[{"n":"t"},{"n":"e"}],"o":{"n":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",128,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",128,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",128,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",128,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",128,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",140,{"o":{"n":"bytescodec"}}],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",139,{"o":{"n":"linescodec"}}],[11,"into_inner","tokio::io","Returns the underlying I/O object.",131,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",35,{"i":[{"n":"errorkind"},{"n":"e"}],"o":{"n":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",35,{"o":{"n":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",35,{"i":[{"n":"i32"}],"o":{"n":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",35,{"i":[{"n":"self"}],"o":{"g":["i32"],"n":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",35,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",35,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",35,{"i":[{"n":"self"}],"o":{"g":["box"],"n":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",35,{"i":[{"n":"self"}],"o":{"n":"errorkind"}}],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",121,{"i":[{"n":"executeerrorkind"},{"n":"f"}],"o":{"n":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",121,{"i":[{"n":"self"}],"o":{"n":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",121,{"i":[{"n":"self"}],"o":{"n":"f"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",58,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",38,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",25,null],[11,"new","tokio::prelude::stream::futures_unordered","Constructs a new, empty `FuturesUnordered`",37,{"o":{"n":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",37,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",37,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a future into the set.",37,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",37,{"i":[{"n":"self"}],"o":{"n":"itermut"}}],[11,"get_ref","tokio::prelude::stream","Acquires a reference to the underlying stream that this combinator is pulling from.",85,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",85,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",85,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",86,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",86,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",86,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",98,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",98,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",98,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",36,{"o":{"n":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",36,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",36,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"push","","Push a future into the queue.",36,null],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",92,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",92,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",92,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",117,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",117,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",117,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",82,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",95,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",95,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",95,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",79,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",79,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",79,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",91,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",91,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",91,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",101,{"i":[{"n":"self"},{"n":"splitsink"}],"o":{"g":["reuniteerror"],"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",87,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",87,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",87,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",96,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",64,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",94,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",94,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",94,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",90,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"send","","Sends a new value along this channel to the receiver.",122,{"i":[{"n":"self"},{"n":"result"}],"o":{"n":"futuresender"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",97,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",97,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",97,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",83,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",83,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",83,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",93,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",93,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",93,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,{"i":[{"n":"self"},{"n":"splitstream"}],"o":{"g":["reuniteerror"],"n":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",89,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",89,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",89,{"i":[{"n":"self"}],"o":{"n":"s"}}],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",30,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",30,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",31,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",31,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"poll_future","tokio::prelude::task","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",119,{"i":[{"n":"self"},{"g":["unpark"],"n":"arc"}],"o":{"g":["async"],"n":"result"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",119,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",119,null],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",119,{"i":[{"n":"self"},{"g":["unpark"],"n":"arc"}],"o":{"g":["async"],"n":"result"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",119,{"i":[{"n":"self"}],"o":{"g":["result"],"n":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",119,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",119,{"i":[{"n":"self"},{"n":"arc"}],"o":{"g":["async"],"n":"result"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",119,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",119,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",119,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",119,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",119,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",119,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",119,{"i":[{"n":"self"},{"n":"n"},{"n":"usize"}],"o":{"g":["async"],"n":"result"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",119,{"i":[{"n":"self"},{"n":"n"},{"n":"usize"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",119,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",119,{"i":[{"n":"self"},{"n":"n"},{"n":"usize"}],"o":{"g":["async"],"n":"result"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",119,{"i":[{"n":"self"},{"n":"n"},{"n":"usize"}],"o":{"g":["async"],"n":"result"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",39,{"i":[{"g":["eventset"],"n":"arc"},{"n":"usize"}],"o":{"n":"unparkevent"}}],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",123,{"o":{"n":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",123,null],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",123,null],[11,"notify","","Notifies the task that last called `register`.",123,null],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",42,{"i":[{"n":"a"}],"o":{"n":"taskrc"}}],[11,"with","","Operate with a reference to the underlying data.",42,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",118,null],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",120,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"r"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",43,null],[11,"is_current","","Returns `true` when called from within the context of the task.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",43,{"i":[{"n":"self"}],"o":{"n":"bool"}}]],"paths":[[8,"Executor"],[3,"Spawn"],[3,"UCred"],[3,"Builder"],[3,"Builder"],[3,"Runtime"],[3,"Handle"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[8,"FutureExt"],[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Executor"],[8,"EventSet"],[8,"Unpark"],[3,"Error"],[3,"FuturesOrdered"],[3,"FuturesUnordered"],[3,"Shared"],[3,"UnparkEvent"],[3,"Err"],[3,"SharedItem"],[3,"TaskRc"],[3,"Task"],[3,"SharedError"],[3,"Join4"],[3,"Inspect"],[3,"Join5"],[3,"Then"],[3,"OrElse"],[3,"Map"],[3,"SelectNext"],[3,"StreamFuture"],[3,"Concat2"],[3,"AndThen"],[3,"CatchUnwind"],[3,"LoopFn"],[3,"FutureSender"],[3,"Fuse"],[3,"SelectAll"],[3,"Select"],[3,"Flatten"],[3,"Collect"],[3,"Select2"],[3,"Forward"],[3,"FromErr"],[3,"SelectOk"],[3,"Lazy"],[3,"Collect"],[3,"Join"],[3,"ForEach"],[3,"MapErr"],[3,"Fold"],[3,"PollFn"],[3,"Join3"],[3,"Empty"],[3,"Concat"],[3,"SendError"],[3,"Filter"],[3,"MapErr"],[3,"Buffered"],[3,"Then"],[3,"Fuse"],[3,"Flatten"],[3,"SplitSink"],[3,"Skip"],[3,"AndThen"],[3,"InspectErr"],[3,"OrElse"],[3,"FromErr"],[3,"Chunks"],[3,"BufferUnordered"],[3,"Inspect"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Peekable"],[3,"Map"],[3,"FilterMap"],[3,"Zip"],[3,"Iter"],[3,"SplitStream"],[3,"Select"],[3,"FlattenStream"],[3,"Receiver"],[3,"Empty"],[3,"Repeat"],[3,"Unfold"],[3,"PollFn"],[3,"Merge"],[3,"IterResult"],[3,"Once"],[3,"Chain"],[3,"IntoStream"],[3,"CatchUnwind"],[3,"IterOk"],[3,"IterMut"],[3,"Wait"],[3,"Run"],[3,"Spawn"],[3,"LocalKey"],[3,"ExecuteError"],[3,"Sender"],[3,"AtomicTask"],[3,"SpawnError"],[3,"DefaultExecutor"],[3,"FramedRead"],[3,"Framed"],[3,"FramedWrite"],[3,"WriteHalf"],[3,"ReadHalf"],[3,"Lines"],[3,"ReadToEnd"],[3,"Flush"],[3,"Shutdown"],[3,"WriteAll"],[3,"Copy"],[3,"ReadExact"],[3,"ReadUntil"],[3,"LinesCodec"],[3,"BytesCodec"],[3,"File"],[3,"OpenOptions"],[3,"Stdout"],[3,"Stderr"],[3,"Stdin"],[3,"SymlinkFuture"],[3,"MetadataFuture"],[3,"SeekFuture"],[3,"OpenFuture"],[3,"CreateFuture"],[3,"ThreadPool"],[3,"Sender"],[3,"Shutdown"],[3,"Builder"],[3,"PollEvented2"],[3,"Turn"],[3,"Registration"],[3,"Reactor"],[3,"Handle"],[3,"Background"],[3,"Interval"],[3,"DelayQueue"],[3,"Timeout"],[3,"Error"],[3,"Error"],[3,"Delay"],[3,"Expired"],[3,"Key"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"ConnectFuture"],[3,"UdpSocket"],[3,"UdpFramed"],[3,"SendDgram"],[3,"RecvDgram"],[3,"UnixStream"],[3,"UnixDatagram"],[3,"UnixListener"],[3,"Incoming"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ConnectFuture"],[3,"Builder"],[3,"LengthDelimitedCodec"],[3,"FrameTooBig"]]};
searchIndex["tokio_channel"] = {"doc":"Asynchronous channels.","items":[[0,"mpsc","tokio_channel","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","tokio_channel::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",null,null],[3,"TrySendError","","Error type returned from `try_send`",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"senderror"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"senderror"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"senderror"}],"o":{"n":"bool"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"trysenderror"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"trysenderror"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"trysenderror"}],"o":{"n":"bool"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"is_full","","Returns true if this error is a result of the channel being full",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",4,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",4,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["trysenderror"],"n":"result"}}],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",0,{"i":[{"n":"self"}],"o":{"g":["senderror"],"n":"poll"}}],[11,"start_send","","",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["senderror"],"n":"startsend"}}],[11,"poll_complete","","",0,{"i":[{"n":"self"}],"o":{"g":["senderror"],"n":"poll"}}],[11,"close","","",0,{"i":[{"n":"self"}],"o":{"g":["senderror"],"n":"poll"}}],[11,"unbounded_send","","Sends the provided message along this channel.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["senderror"],"n":"result"}}],[11,"start_send","","",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["senderror"],"n":"startsend"}}],[11,"poll_complete","","",1,{"i":[{"n":"self"}],"o":{"g":["senderror"],"n":"poll"}}],[11,"close","","",1,{"i":[{"n":"self"}],"o":{"g":["senderror"],"n":"poll"}}],[11,"clone","","",1,{"i":[{"n":"self"}],"o":{"n":"unboundedsender"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"close","","Closes the receiving half",2,{"i":[{"n":"self"}]}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[0,"oneshot","tokio_channel","A one-shot, futures-aware channel",null,null],[3,"Receiver","tokio_channel::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"send","","Completes this oneshot with a successful result.",6,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",6,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"canceled"}}],[11,"eq","","",7,{"i":[{"n":"self"},{"n":"canceled"}],"o":{"n":"bool"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",7,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",5,{"i":[{"n":"self"}]}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"g":["canceled"],"n":"poll"}}],[11,"drop","","",5,{"i":[{"n":"self"}]}]],"paths":[[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"SendError"],[3,"TrySendError"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"]]};
searchIndex["tokio_codec"] = {"doc":"Utilities for encoding and decoding frames.","items":[[8,"Decoder","tokio_codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",0,null],[16,"Error","","The type of unrecoverable frame decoding errors.",0,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option"],"n":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option"],"n":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"framed"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",1,null],[16,"Error","","The type of encoding errors.",1,null],[10,"encode","","Encodes a frame into the buffer provided.",1,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",null,null],[12,"io","","The inner transport used to read bytes to and write bytes to",2,null],[12,"codec","","The codec",2,null],[12,"read_buf","","The buffer with read but unprocessed data.",2,null],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",null,null],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",null,null],[11,"clone","","",3,{"i":[{"n":"self"}],"o":{"n":"bytescodec"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"ne","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"cmp","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"le","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"gt","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"ge","","",3,{"i":[{"n":"self"},{"n":"bytescodec"}],"o":{"n":"bool"}}],[11,"hash","","",3,null],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",3,{"o":{"n":"bytescodec"}}],[11,"decode","","",3,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option","error"],"n":"result"}}],[11,"encode","","",3,{"i":[{"n":"self"},{"n":"bytes"},{"n":"bytesmut"}],"o":{"g":["error"],"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"linescodec"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"eq","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"ne","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"cmp","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"le","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"gt","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"ge","","",4,{"i":[{"n":"self"},{"n":"linescodec"}],"o":{"n":"bool"}}],[11,"hash","","",4,null],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",4,{"o":{"n":"linescodec"}}],[11,"decode","","",4,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option","error"],"n":"result"}}],[11,"decode_eof","","",4,{"i":[{"n":"self"},{"n":"bytesmut"}],"o":{"g":["option","error"],"n":"result"}}],[11,"encode","","",4,{"i":[{"n":"self"},{"n":"string"},{"n":"bytesmut"}],"o":{"g":["error"],"n":"result"}}],[11,"start_send","","",5,null],[11,"poll_complete","","",5,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",5,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",6,null],[11,"poll_complete","","",6,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",6,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"start_send","","",7,null],[11,"poll_complete","","",7,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"close","","",7,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",6,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"poll","","",7,{"i":[{"n":"self"}],"o":{"g":["async"],"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"g":["error"],"n":"result"}}],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",6,{"i":[{"n":"t"},{"n":"u"}],"o":{"n":"framed"}}],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",6,{"i":[{"n":"framedparts"}],"o":{"n":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",6,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",6,{"i":[{"n":"self"}],"o":{"n":"framedparts"}}],[11,"new","","Create a new, default, `FramedParts`",2,{"i":[{"n":"t"},{"n":"u"}],"o":{"n":"framedparts"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",5,{"i":[{"n":"t"},{"n":"d"}],"o":{"n":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",5,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",5,{"i":[{"n":"self"}],"o":{"n":"d"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",7,{"i":[{"n":"t"},{"n":"e"}],"o":{"n":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",7,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",7,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",7,{"i":[{"n":"self"}],"o":{"n":"e"}}]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"FramedRead"],[3,"Framed"],[3,"FramedWrite"]]};
searchIndex["tokio_current_thread"] = {"doc":"A single-threaded executor which executes tasks on the same thread from which they are spawned.","items":[[3,"CurrentThread","tokio_current_thread","Executes tasks on the current thread",null,null],[3,"TaskExecutor","","Executes futures on the current thread.",null,null],[3,"Turn","","Returned by the `turn` function.",null,null],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution context.",null,null],[3,"RunError","","Error returned by the `run` function.",null,null],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",null,null],[3,"TurnError","","Error returned by the `turn` function.",null,null],[3,"BlockError","","Error returned by the `block_on` function.",null,null],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` instance",null,null],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",null,{"i":[{"n":"f"}],"o":{"n":"result"}}],[5,"spawn","","Executes a future on the current thread.",null,{"i":[{"n":"f"}]}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"taskexecutor"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",1,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",4,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",5,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Create a new instance of `CurrentThread`.",6,{"o":{"n":"self"}}],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",6,{"i":[{"n":"p"}],"o":{"n":"self"}}],[11,"is_idle","","Returns `true` if the executor is currently idle.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"spawn","","Spawn the future on the executor.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",6,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["blockerror"],"n":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",6,{"i":[{"n":"self"}],"o":{"g":["runerror"],"n":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",6,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["runtimeouterror"],"n":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",6,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["turn","turnerror"],"n":"result"}}],[11,"enter","","Bind `CurrentThread` instance with an execution context.",6,{"i":[{"n":"self"},{"n":"enter"}],"o":{"n":"entered"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",6,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",6,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"handle","","Get a new handle to spawn futures on the executor",6,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"drop","","",6,{"i":[{"n":"self"}]}],[11,"spawn","","",6,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"spawn","","Spawn the future on the executor.",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["blockerror"],"n":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,{"i":[{"n":"self"}],"o":{"g":["runerror"],"n":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"g":["runtimeouterror"],"n":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",7,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["turn","turnerror"],"n":"result"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",7,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",7,{"i":[{"n":"self"}],"o":{"n":"p"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"spawn","","Spawn a future onto the `CurrentThread` instance corresponding to this handle",8,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"current","","Returns an executor that executes futures on the current thread.",0,{"o":{"n":"taskexecutor"}}],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",0,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"spawn","","",0,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"execute","","",0,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["executeerror"],"n":"result"}}],[11,"is_timeout","","Returns `true` if the error was caused by the operation timing out.",3,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"from","","",3,{"i":[{"n":"entererror"}],"o":{"n":"self"}}],[11,"into_inner","","Returns the error yielded by the future being blocked on",5,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"from","","",5,{"i":[{"n":"entererror"}],"o":{"n":"self"}}]],"paths":[[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Handle"]]};
searchIndex["tokio_executor"] = {"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"o":{"g":["enter","entererror"],"n":"result"}}],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",null,{"i":[{"n":"t"}]}],[5,"with_default","","Set the default executor for the duration of the closure",null,{"i":[{"n":"t"},{"n":"enter"},{"n":"f"}],"o":{"n":"r"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",0,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,{"i":[{"n":"self"},{"n":"f"}]}],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,{"i":[{"n":"self"}]}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",2,{"i":[{"n":"self"}],"o":{"n":"defaultexecutor"}}],[11,"current","","Returns a handle to the default executor for the current context.",2,{"o":{"n":"defaultexecutor"}}],[11,"spawn","","",2,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","",2,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[0,"park","","Abstraction over blocking and unblocking the current thread.",null,null],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",null,null],[8,"Park","","Block the current thread.",null,null],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,null],[16,"Error","","Error returned by `park`",3,null],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,null],[10,"park","","Block the current thread unless or until the token is available.",3,{"i":[{"n":"self"}],"o":{"n":"result"}}],[10,"park_timeout","","Park the current thread for at most `duration`.",3,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"result"}}],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",null,null],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,{"i":[{"n":"self"}]}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"unparkthread"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,{"o":{"n":"parkthread"}}],[11,"unpark","","",5,null],[11,"park","","",5,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"park_timeout","","",5,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"result"}}],[11,"unpark","","",7,{"i":[{"n":"self"}]}],[8,"Executor","tokio_executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",8,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,{"o":{"n":"self"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,{"o":{"n":"self"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",9,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_fs"] = {"doc":"Asynchronous file and standard stream adaptation.","items":[[3,"CreateDirFuture","tokio_fs","Future returned by `create_dir`.",null,null],[3,"CreateDirAllFuture","","Future returned by `create_dir_all`.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"HardLinkFuture","","Future returned by `hard_link`.",null,null],[3,"MetadataFuture","","Future returned by `metadata`.",null,null],[3,"ReadDirFuture","","Future returned by `read_dir`.",null,null],[3,"ReadDir","","Stream of the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the [`ReadDir`] stream.",null,null],[3,"ReadLinkFuture","","Future returned by `read_link`.",null,null],[3,"RemoveDirFuture","","Future returned by `remove_dir`.",null,null],[3,"RemoveFileFuture","","Future returned by `remove_file`.",null,null],[3,"RenameFuture","","Future returned by `rename`.",null,null],[3,"SetPermissionsFuture","","Future returned by `set_permissions`.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"SymlinkMetadataFuture","","Future returned by `symlink_metadata`.",null,null],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"i":[{"n":"p"}],"o":{"n":"createdirfuture"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they are missing.",null,{"i":[{"n":"p"}],"o":{"n":"createdirallfuture"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"i":[{"n":"p"},{"n":"q"}],"o":{"n":"hardlinkfuture"}}],[5,"metadata","","Queries the file system metadata for a path.",null,{"i":[{"n":"p"}],"o":{"n":"metadatafuture"}}],[5,"read_dir","","Returns a stream over the entries within a directory.",null,{"i":[{"n":"p"}],"o":{"n":"readdirfuture"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"i":[{"n":"p"}],"o":{"n":"readlinkfuture"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"i":[{"n":"p"}],"o":{"n":"removedirfuture"}}],[5,"remove_file","","Removes a file from the filesystem.",null,{"i":[{"n":"p"}],"o":{"n":"removefilefuture"}}],[5,"rename","","Rename a file or directory to a new name, replacing the original file if `to` already exists.",null,{"i":[{"n":"p"},{"n":"q"}],"o":{"n":"renamefuture"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"i":[{"n":"p"},{"n":"permissions"}],"o":{"n":"setpermissionsfuture"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"o":{"n":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"o":{"n":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"o":{"n":"stderr"}}],[5,"symlink_metadata","","Queries the file system metadata for a path.",null,{"i":[{"n":"p"}],"o":{"n":"symlinkmetadatafuture"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",0,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"file","","Types for working with [`File`].",null,null],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"MetadataFuture","","Future returned by `File::metadata` and resolves to a `(Metadata, File)` instance.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"SeekFuture","","Future returned by `File::seek`.",null,null],[3,"File","","A reference to an open file on the filesystem.",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",4,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"clone","tokio_fs","",5,{"i":[{"n":"self"}],"o":{"n":"openoptions"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",5,{"o":{"n":"openoptions"}}],[11,"read","","See the underlying [`read`] call for details.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"write","","See the underlying [`write`] call for details.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"append","","See the underlying [`append`] call for details.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"truncate","","See the underlying [`truncate`] call for details.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"create","","See the underlying [`create`] call for details.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"create_new","","See the underlying [`create_new`] call for details.",5,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",5,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"openfuture"}}],[11,"from","","",5,{"i":[{"n":"stdopenoptions"}],"o":{"n":"openoptions"}}],[11,"fmt","tokio_fs::file","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",6,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",7,{"i":[{"n":"p"}],"o":{"n":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",7,{"i":[{"n":"p"}],"o":{"n":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",7,{"i":[{"n":"self"},{"n":"seekfrom"}],"o":{"g":["u64","error"],"n":"poll"}}],[11,"seek","","Seek to an offset, in bytes, in a stream.",7,{"i":[{"n":"self"},{"n":"seekfrom"}],"o":{"n":"seekfuture"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",7,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",7,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",7,{"i":[{"n":"self"},{"n":"u64"}],"o":{"g":["error"],"n":"poll"}}],[11,"metadata","","Queries metadata about the underlying file.",7,{"i":[{"n":"self"}],"o":{"n":"metadatafuture"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",7,{"i":[{"n":"self"}],"o":{"g":["metadata","error"],"n":"poll"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",7,{"i":[{"n":"self"}],"o":{"g":["file","error"],"n":"poll"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",7,{"i":[{"n":"self"},{"n":"permissions"}],"o":{"g":["error"],"n":"poll"}}],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",7,{"i":[{"n":"self"}],"o":{"n":"stdfile"}}],[11,"read","","",7,null],[11,"prepare_uninitialized_buffer","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"shutdown","","",7,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"drop","","",7,{"i":[{"n":"self"}]}],[11,"fmt","tokio_fs","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",8,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",9,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[0,"os","","OS-specific functionality.",null,null],[0,"unix","tokio_fs::os","Unix-specific extensions to primitives in the `tokio_fs` module.",null,null],[3,"SymlinkFuture","tokio_fs::os::unix","Future returned by `symlink`.",null,null],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,{"i":[{"n":"p"},{"n":"q"}],"o":{"n":"symlinkfuture"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",10,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","tokio_fs","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",11,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",12,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"fmt","","",13,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_std","","Destructures the `tokio_fs::DirEntry` into a [`std::fs::DirEntry`][std].",13,{"i":[{"n":"self"}],"o":{"n":"stddirentry"}}],[11,"path","","Returns the full path to the file that this entry represents.",13,{"i":[{"n":"self"}],"o":{"n":"pathbuf"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other leading path component.",13,{"i":[{"n":"self"}],"o":{"n":"osstring"}}],[11,"poll_metadata","","Return the metadata for the file that this entry points at.",13,{"i":[{"n":"self"}],"o":{"g":["metadata","error"],"n":"poll"}}],[11,"poll_file_type","","Return the file type for the file that this entry points at.",13,{"i":[{"n":"self"}],"o":{"g":["filetype","error"],"n":"poll"}}],[11,"ino","","",13,{"i":[{"n":"self"}],"o":{"n":"u64"}}],[11,"fmt","","",14,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",14,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",15,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",15,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",16,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",16,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",17,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",17,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",18,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",18,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",19,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"read","","",19,null],[11,"prepare_uninitialized_buffer","","",19,null],[11,"fmt","","",20,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write","","",20,null],[11,"flush","","",20,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"shutdown","","",20,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",21,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"write","","",21,null],[11,"flush","","",21,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"shutdown","","",21,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",22,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",22,{"i":[{"n":"self"}],"o":{"n":"poll"}}]],"paths":[[3,"CreateDirFuture"],[3,"CreateDirAllFuture"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"OpenFuture"],[3,"OpenOptions"],[3,"SeekFuture"],[3,"File"],[3,"HardLinkFuture"],[3,"MetadataFuture"],[3,"SymlinkFuture"],[3,"ReadDirFuture"],[3,"ReadDir"],[3,"DirEntry"],[3,"ReadLinkFuture"],[3,"RemoveDirFuture"],[3,"RemoveFileFuture"],[3,"RenameFuture"],[3,"SetPermissionsFuture"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[3,"SymlinkMetadataFuture"]]};
searchIndex["tokio_io"] = {"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"i":[{"n":"r"},{"n":"w"}],"o":{"n":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"i":[{"n":"a"}],"o":{"n":"flush"}}],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"i":[{"n":"a"}],"o":{"n":"lines"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"i":[{"n":"r"},{"n":"t"}],"o":{"n":"read"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"i":[{"n":"a"},{"n":"t"}],"o":{"n":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"i":[{"n":"a"},{"g":["u8"],"n":"vec"}],"o":{"n":"readtoend"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"i":[{"n":"a"},{"n":"u8"},{"g":["u8"],"n":"vec"}],"o":{"n":"readuntil"}}],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"i":[{"n":"a"}],"o":{"n":"shutdown"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"i":[{"n":"a"},{"n":"t"}],"o":{"n":"writeall"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",4,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",6,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",7,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",8,{"i":[{"n":"self"}],"o":{"n":"allowstdio"}}],[11,"eq","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"ne","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"cmp","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"ordering"}}],[11,"partial_cmp","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"g":["ordering"],"n":"option"}}],[11,"lt","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"le","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"gt","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"ge","","",8,{"i":[{"n":"self"},{"n":"allowstdio"}],"o":{"n":"bool"}}],[11,"hash","","",8,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"write","","",8,null],[11,"flush","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"write_all","","",8,null],[11,"write_fmt","","",8,{"i":[{"n":"self"},{"n":"arguments"}],"o":{"n":"result"}}],[11,"shutdown","","",8,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"read","","",8,null],[11,"read_to_end","","",8,{"i":[{"n":"self"},{"n":"vec"}],"o":{"g":["usize"],"n":"result"}}],[11,"read_to_string","","",8,{"i":[{"n":"self"},{"n":"string"}],"o":{"g":["usize"],"n":"result"}}],[11,"read_exact","","",8,null],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"into_inner","","Returns the underlying I/O object.",9,{"i":[{"n":"self"}],"o":{"n":"a"}}],[11,"poll","","",9,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"fmt","","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"read","","",10,null],[11,"read_buf","","",10,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"write","","",11,null],[11,"flush","","",11,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"shutdown","","",11,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"write_buf","","",11,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",12,{"i":[{"n":"t"}],"o":{"n":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",12,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",12,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",12,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",12,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",12,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"window"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",13,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",14,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",13,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"] = {"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",null,null],[3,"Shutdown","","Future that resolves when the reactor thread has shutdown.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",null,null],[3,"Reactor","","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",null,null],[5,"with_default","","Set the default reactor for the duration of the closure",null,{"i":[{"n":"handle"},{"n":"enter"},{"n":"f"}],"o":{"n":"r"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"handle","","Returns a reference to the reactor handle.",0,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",0,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",0,{"i":[{"n":"self"}]}],[11,"drop","","",0,{"i":[{"n":"self"}]}],[11,"poll","","",1,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",2,{"i":[{"n":"e"}],"o":{"n":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",2,{"i":[{"n":"e"},{"n":"handle"}],"o":{"n":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",2,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",2,{"i":[{"n":"self"}],"o":{"n":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",2,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",2,{"i":[{"n":"self"},{"n":"ready"}],"o":{"n":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",2,{"i":[{"n":"self"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"shutdown","","",2,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"drop","","",2,{"i":[{"n":"self"}]}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Registration`.",3,{"o":{"n":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["bool"],"n":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",3,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",3,{"i":[{"n":"self"},{"n":"t"},{"n":"handle"}],"o":{"g":["bool"],"n":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",3,{"i":[{"n":"self"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"take_read_ready","","Consume any pending read readiness event.",3,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",3,{"i":[{"n":"self"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"take_write_ready","","Consume any pending write readiness event.",3,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"clone","","",4,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",6,{"i":[{"n":"self"}],"o":{"n":"setfallbackerror"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",7,{"o":{"g":["reactor"],"n":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",7,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",7,{"i":[{"n":"self"}],"o":{"g":["setfallbackerror"],"n":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",7,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["turn"],"n":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",7,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"background","","Run this reactor on a background thread.",7,{"i":[{"n":"self"}],"o":{"g":["background"],"n":"result"}}],[11,"unpark","","",7,null],[11,"park","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"park_timeout","","",7,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"result"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"current","","Returns a handle to the current reactor.",4,{"o":{"n":"handle"}}],[11,"unpark","","",4,{"i":[{"n":"self"}]}],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",4,{"o":{"n":"handle"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}]],"paths":[[3,"Background"],[3,"Shutdown"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_tcp"] = {"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",0,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"as_raw_fd","","",1,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"i":[{"n":"socketaddr"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",1,{"i":[{"n":"tcplistener"},{"n":"handle"}],"o":{"g":["tcplistener"],"n":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"i":[{"n":"self"}],"o":{"n":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_raw_fd","","",2,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",2,{"i":[{"n":"socketaddr"}],"o":{"n":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",2,{"i":[{"n":"tcpstream"},{"n":"handle"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",2,{"i":[{"n":"tcpstream"},{"n":"socketaddr"},{"n":"handle"}],"o":{"n":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",2,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",2,{"i":[{"n":"self"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",2,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",2,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",2,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",2,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",2,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",2,{"i":[{"n":"self"}],"o":{"g":["usize"],"n":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",2,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",2,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",2,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",2,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",2,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",2,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",2,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",2,{"i":[{"n":"self"}],"o":{"g":["tcpstream"],"n":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"prepare_uninitialized_buffer","","",2,null],[11,"read_buf","","",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"shutdown","","",2,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"write_buf","","",2,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"g":["tcpstream","error"],"n":"poll"}}]],"paths":[[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"] = {"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",null,null],[3,"Builder","","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[3,"Worker","","Thread worker",null,null],[3,"WorkerId","","Identifies a thread pool worker.",null,null],[5,"blocking","","Enter a blocking section of code.",null,{"i":[{"n":"f"}],"o":{"g":["blockingerror"],"n":"poll"}}],[0,"park","","Thread parking utilities.",null,null],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",null,null],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Creates a new `DefaultPark` instance.",0,{"o":{"n":"defaultpark"}}],[11,"unpark","","",0,null],[11,"park","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"park_timeout","","",0,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"result"}}],[11,"unpark","","",1,{"i":[{"n":"self"}]}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",2,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","tokio_threadpool","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"description","","",3,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",4,{"o":{"n":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"keep_alive","","Set the worker thread keep alive duration",4,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"n":"self"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",4,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"self"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",4,{"i":[{"n":"self"},{"n":"usize"}],"o":{"n":"self"}}],[11,"around_worker","","Execute function `f` on each worker thread.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"before_stop","","Execute function `f` before each thread stops.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",4,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"self"}}],[11,"build","","Create the configured `ThreadPool`.",4,{"i":[{"n":"self"}],"o":{"n":"threadpool"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"spawn","","Spawn a future onto the thread pool",5,{"i":[{"n":"self"},{"n":"f"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"status","","",5,{"i":[{"n":"self"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"spawn","","",5,{"i":[{"n":"self"},{"g":["future"],"n":"box"}],"o":{"g":["spawnerror"],"n":"result"}}],[11,"execute","","",5,{"i":[{"n":"self"},{"n":"t"}],"o":{"g":["executeerror"],"n":"result"}}],[11,"clone","","",5,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",6,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",7,{"o":{"n":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",7,{"i":[{"n":"self"},{"n":"f"}]}],[11,"spawn_handle","","Spawn a future on to the thread pool, return a future representing  the produced value.",7,{"i":[{"n":"self"},{"n":"f"}],"o":{"n":"spawnhandle"}}],[11,"sender","","Return a reference to the sender handle",7,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",7,{"i":[{"n":"self"}],"o":{"n":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",7,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"shutdown","","Shutdown the pool",7,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",7,{"i":[{"n":"self"}],"o":{"n":"shutdown"}}],[11,"drop","","",7,{"i":[{"n":"self"}]}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",9,{"i":[{"n":"self"}],"o":{"n":"workerid"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"i":[{"n":"self"},{"n":"workerid"}],"o":{"n":"bool"}}],[11,"ne","","",9,{"i":[{"n":"self"},{"n":"workerid"}],"o":{"n":"bool"}}],[11,"id","","Returns a reference to the worker's identifier.",8,{"i":[{"n":"self"}],"o":{"n":"workerid"}}],[11,"run","","Run the worker",8,{"i":[{"n":"self"}]}],[11,"drop","","",8,{"i":[{"n":"self"}]}]],"paths":[[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"],[3,"BlockingError"],[3,"Builder"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Worker"],[3,"WorkerId"]]};
searchIndex["tokio_timer"] = {"doc":"Utilities for tracking time.","items":[[3,"DelayQueue","tokio_timer","A queue of delayed elements.",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Timeout","","Allows a `Future` or `Stream` to execute for a limited amount of time.",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"i":[{"n":"handle"},{"n":"enter"},{"n":"f"}],"o":{"n":"r"}}],[5,"sleep","","Create a Future that completes in `duration` from now.",null,{"i":[{"n":"duration"}],"o":{"n":"delay"}}],[0,"clock","","A configurable source of time.",null,null],[3,"Clock","tokio_timer::clock","A handle to a source of time.",null,null],[5,"now","","Returns an `Instant` corresponding to \"now\".",null,{"o":{"n":"instant"}}],[5,"with_default","","Set the default clock for the duration of the closure.",null,{"i":[{"n":"clock"},{"n":"enter"},{"n":"f"}],"o":{"n":"r"}}],[11,"default","","",0,{"o":{"n":"clock"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"clock"}}],[11,"new","","Return a new `Clock` instance that uses the current execution context's source of time.",0,{"o":{"n":"clock"}}],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the source of time.",0,{"i":[{"n":"t"}],"o":{"n":"clock"}}],[11,"system","","Return a new `Clock` instance that uses `Instant::now()` as the source of time.",0,{"o":{"n":"clock"}}],[11,"now","","Returns an instant corresponding to \"now\" by using the instance's source of time.",0,{"i":[{"n":"self"}],"o":{"n":"instant"}}],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[8,"Now","","Returns `Instant` values representing the current instant in time.",null,null],[10,"now","","Returns an instant corresponding to \"now\".",1,{"i":[{"n":"self"}],"o":{"n":"instant"}}],[0,"delay_queue","tokio_timer","A queue of delayed elements.",null,null],[3,"DelayQueue","tokio_timer::delay_queue","A queue of delayed elements.",null,null],[3,"Expired","","An entry in `DelayQueue` that has expired and removed.",null,null],[3,"Key","","Token to a value stored in a `DelayQueue`.",null,null],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new, empty, `DelayQueue`",2,{"o":{"n":"delayqueue"}}],[11,"with_capacity_and_handle","","Create a new, empty, `DelayQueue` backed by the specified timer.",2,{"i":[{"n":"usize"},{"n":"handle"}],"o":{"n":"delayqueue"}}],[11,"with_capacity","","Create a new, empty, `DelayQueue` with the specified capacity.",2,{"i":[{"n":"usize"}],"o":{"n":"delayqueue"}}],[11,"insert_at","","Insert `value` into the queue set to expire at a specific instant in time.",2,{"i":[{"n":"self"},{"n":"t"},{"n":"instant"}],"o":{"n":"key"}}],[11,"insert","","Insert `value` into the queue set to expire after the requested duration elapses.",2,{"i":[{"n":"self"},{"n":"t"},{"n":"duration"}],"o":{"n":"key"}}],[11,"remove","","Remove the item associated with `key` from the queue.",2,{"i":[{"n":"self"},{"n":"key"}],"o":{"n":"expired"}}],[11,"reset_at","","Sets the delay of the item associated with `key` to expire at `when`.",2,{"i":[{"n":"self"},{"n":"key"},{"n":"instant"}]}],[11,"reset","","Sets the delay of the item associated with `key` to expire after `timeout`.",2,{"i":[{"n":"self"},{"n":"key"},{"n":"duration"}]}],[11,"clear","","Clears the queue, removing all items.",2,{"i":[{"n":"self"}]}],[11,"capacity","","Returns the number of elements the queue can hold without reallocating.",2,{"i":[{"n":"self"}],"o":{"n":"usize"}}],[11,"reserve","","Reserve capacity for at least `additional` more items to be queued without allocating.",2,{"i":[{"n":"self"},{"n":"usize"}]}],[11,"is_empty","","Returns `true` if there are no items in the queue.",2,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"get_ref","","Returns a reference to the inner value.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Returns a mutable reference to the inner value.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes `self` and returns the inner value.",3,{"i":[{"n":"self"}],"o":{"n":"t"}}],[0,"timeout","tokio_timer","Allows a future or stream to execute for a maximum amount of time.",null,null],[3,"Timeout","tokio_timer::timeout","Allows a `Future` or `Stream` to execute for a limited amount of time.",null,null],[3,"Error","","Error returned by `Timeout`.",null,null],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Timeout` that allows `value` to execute for a duration of at most `timeout`.",5,{"i":[{"n":"t"},{"n":"duration"}],"o":{"n":"timeout"}}],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this timeout.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"into_inner","","Consumes this timeout, returning the underlying value.",5,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new_at","","Create a new `Timeout` that completes when `future` completes or when `deadline` is reached.",5,{"i":[{"n":"t"},{"n":"instant"}],"o":{"n":"timeout"}}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"inner","","Create a new `Error` representing the inner value completing with `Err`.",6,{"i":[{"n":"t"}],"o":{"n":"error"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner value completing with `Err`.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",6,{"i":[{"n":"self"}],"o":{"n":"option"}}],[11,"elapsed","","Create a new `Error` representing the inner value not completing before the deadline is reached.",6,{"o":{"n":"error"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner value not completing before the deadline is reached.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"timer","","Creates a new `Error` representing an error encountered by the timer implementation",6,{"i":[{"n":"error"}],"o":{"n":"error"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",6,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",6,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"option"}}],[11,"description","","",6,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[0,"timer","tokio_timer","Timer implementation.",null,null],[3,"Handle","tokio_timer::timer","Handle to timer instance.",null,null],[3,"SystemNow","","A handle to a source of time.",null,null],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",null,null],[3,"Turn","","Return value from the `turn` method on `Timer`.",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"i":[{"n":"handle"},{"n":"enter"},{"n":"f"}],"o":{"n":"r"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"clone","","",7,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"current","","Returns a handle to the current timer.",7,{"o":{"n":"handle"}}],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",7,{"i":[{"n":"self"},{"n":"instant"}],"o":{"n":"delay"}}],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",7,{"i":[{"n":"self"},{"n":"t"},{"n":"instant"}],"o":{"n":"deadline"}}],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",7,{"i":[{"n":"self"},{"n":"instant"},{"n":"duration"}],"o":{"n":"interval"}}],[11,"default","","",7,{"o":{"n":"handle"}}],[11,"fmt","","",8,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",9,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",8,{"i":[{"n":"t"}],"o":{"n":"self"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",8,{"i":[{"n":"self"}],"o":{"n":"t"}}],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",8,{"i":[{"n":"t"},{"n":"n"}],"o":{"n":"self"}}],[11,"handle","","Returns a handle to the timer.",8,{"i":[{"n":"self"}],"o":{"n":"handle"}}],[11,"turn","","Performs one iteration of the timer loop.",8,{"i":[{"n":"self"},{"g":["duration"],"n":"option"}],"o":{"g":["turn"],"n":"result"}}],[11,"default","","",8,{"o":{"n":"self"}}],[11,"unpark","","",8,null],[11,"park","","",8,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"park_timeout","","",8,{"i":[{"n":"self"},{"n":"duration"}],"o":{"n":"result"}}],[11,"drop","","",8,{"i":[{"n":"self"}]}],[11,"fmt","tokio_timer","",10,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",10,{"i":[{"n":"instant"}],"o":{"n":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",10,{"i":[{"n":"self"}],"o":{"n":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",10,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",10,{"i":[{"n":"self"},{"n":"instant"}]}],[11,"poll","","",10,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"shutdown","","Create an error representing a shutdown timer.",11,{"o":{"n":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",11,{"o":{"n":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",11,{"i":[{"n":"self"}],"o":{"n":"bool"}}],[11,"description","","",11,{"i":[{"n":"self"}],"o":{"n":"str"}}],[11,"fmt","","",11,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",12,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",12,{"i":[{"n":"instant"},{"n":"duration"}],"o":{"n":"interval"}}],[11,"new_interval","","Creates new `Interval` that yields with interval of `duration`.",12,{"i":[{"n":"duration"}],"o":{"n":"interval"}}],[11,"poll","","",12,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}]],"paths":[[3,"Clock"],[8,"Now"],[3,"DelayQueue"],[3,"Expired"],[3,"Key"],[3,"Timeout"],[3,"Error"],[3,"Handle"],[3,"Timer"],[3,"Turn"],[3,"Delay"],[3,"Error"],[3,"Interval"]]};
searchIndex["tokio_tls"] = {"doc":"Async TLS streams","items":[[3,"TlsStream","tokio_tls","A wrapper around an underlying raw stream which implements the TLS or SSL protocol.",null,null],[3,"TlsConnector","","A wrapper around a `native_tls::TlsConnector`, providing an async `connect` method.",null,null],[3,"TlsAcceptor","","A wrapper around a `native_tls::TlsAcceptor`, providing an async `accept` method.",null,null],[3,"Connect","","Future returned from `TlsConnector::connect` which will resolve once the connection handshake has finished.",null,null],[3,"Accept","","Future returned from `TlsAcceptor::accept` which will resolve once the accept handshake has finished.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"get_ref","","Get access to the internal `native_tls::TlsStream` stream which also transitively allows access to `S`.",0,{"i":[{"n":"self"}],"o":{"n":"tlsstream"}}],[11,"get_mut","","Get mutable access to the internal `native_tls::TlsStream` stream which also transitively allows mutable access to `S`.",0,{"i":[{"n":"self"}],"o":{"n":"tlsstream"}}],[11,"read","","",0,null],[11,"write","","",0,null],[11,"flush","","",0,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"shutdown","","",0,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"connect","","Connects the provided stream with this connector, assuming the provided domain.",1,{"i":[{"n":"self"},{"n":"str"},{"n":"s"}],"o":{"n":"connect"}}],[11,"from","","",1,{"i":[{"n":"tlsconnector"}],"o":{"n":"tlsconnector"}}],[11,"accept","","Accepts a new client connection with the provided stream.",2,{"i":[{"n":"self"},{"n":"s"}],"o":{"n":"accept"}}],[11,"from","","",2,{"i":[{"n":"tlsacceptor"}],"o":{"n":"tlsacceptor"}}],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"g":["tlsstream","error"],"n":"poll"}}],[11,"poll","","",4,{"i":[{"n":"self"}],"o":{"g":["tlsstream","error"],"n":"poll"}}]],"paths":[[3,"TlsStream"],[3,"TlsConnector"],[3,"TlsAcceptor"],[3,"Connect"],[3,"Accept"]]};
searchIndex["tokio_udp"] = {"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",0,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"poll"}}],[11,"start_send","","",0,null],[11,"poll_complete","","",0,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"close","","",0,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,{"i":[{"n":"udpsocket"},{"n":"c"}],"o":{"n":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,{"i":[{"n":"self"}],"o":{"n":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,{"i":[{"n":"self"}],"o":{"n":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,{"i":[{"n":"self"}],"o":{"n":"udpsocket"}}],[11,"as_raw_fd","","",1,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,{"i":[{"n":"socketaddr"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,{"i":[{"n":"udpsocket"},{"n":"handle"}],"o":{"g":["udpsocket"],"n":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",1,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,{"i":[{"n":"self"},{"n":"socketaddr"}],"o":{"n":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,{"i":[{"n":"self"},{"n":"t"},{"n":"socketaddr"}],"o":{"n":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"recvdgram"}}],[11,"poll_read_ready","","Check the UDP socket's read readiness state.",1,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"poll_write_ready","","Check the UDP socket's write readiness state.",1,{"i":[{"n":"self"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"i":[{"n":"self"}],"o":{"g":["bool"],"n":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"i":[{"n":"self"},{"n":"bool"}],"o":{"n":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"i":[{"n":"self"}],"o":{"g":["u32"],"n":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"i":[{"n":"self"},{"n":"u32"}],"o":{"n":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"n":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"n":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,{"i":[{"n":"self"},{"n":"ipv4addr"},{"n":"ipv4addr"}],"o":{"n":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,{"i":[{"n":"self"},{"n":"ipv6addr"},{"n":"u32"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["tokio_uds"] = {"doc":"Unix Domain Sockets for Tokio.","items":[[3,"UnixDatagram","tokio_uds","An I/O object representing a Unix datagram socket.",null,null],[3,"Incoming","","Stream of listeners",null,null],[3,"UnixListener","","A Unix socket which can accept connections from other Unix sockets.",null,null],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",null,null],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",null,null],[3,"UnixStream","","A structure representing a connected Unix socket.",null,null],[3,"ConnectFuture","","Future returned by `UnixStream::connect` which will resolve to a `UnixStream` when the stream is connected.",null,null],[3,"UCred","","Credentials of a process",null,null],[12,"uid","","UID (user ID) of the process",0,null],[12,"gid","","GID (group ID) of the process",0,null],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",1,{"i":[{"n":"p"}],"o":{"g":["unixdatagram"],"n":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",1,{"o":{"n":"result"}}],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",1,{"i":[{"n":"unixdatagram"},{"n":"handle"}],"o":{"g":["unixdatagram"],"n":"result"}}],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",1,{"o":{"g":["unixdatagram"],"n":"result"}}],[11,"connect","","Connects the socket to the specified address.",1,{"i":[{"n":"self"},{"n":"p"}],"o":{"n":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",1,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",1,{"i":[{"n":"self"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",1,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",1,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"poll_recv_from","","Receives data from the socket.",1,null],[11,"poll_recv","","Receives data from the socket.",1,null],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",1,{"i":[{"n":"self"},{"n":"t"}],"o":{"n":"recvdgram"}}],[11,"poll_send_to","","Sends data on the socket to the specified address.",1,null],[11,"poll_send","","Sends data on the socket to the socket's peer.",1,null],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",1,{"i":[{"n":"self"},{"n":"t"},{"n":"p"}],"o":{"n":"senddgram"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",1,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",1,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"fmt","","",1,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_raw_fd","","",1,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"fmt","","",2,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",2,{"i":[{"n":"self"}],"o":{"g":["option","error"],"n":"poll"}}],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",3,{"i":[{"n":"p"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",3,{"i":[{"n":"unixlistener"},{"n":"handle"}],"o":{"g":["unixlistener"],"n":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",3,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",3,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",3,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",3,{"i":[{"n":"self"}],"o":{"n":"incoming"}}],[11,"fmt","","",3,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_raw_fd","","",3,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"fmt","","",4,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",4,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",5,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"poll","","",5,{"i":[{"n":"self"}],"o":{"n":"poll"}}],[11,"fmt","","",6,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"connect","","Connects to the socket named by `path`.",7,{"i":[{"n":"p"}],"o":{"n":"connectfuture"}}],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",7,{"i":[{"n":"unixstream"},{"n":"handle"}],"o":{"g":["unixstream"],"n":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",7,{"o":{"n":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",7,{"i":[{"n":"self"},{"n":"ready"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",7,{"i":[{"n":"self"}],"o":{"g":["ready","error"],"n":"poll"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",7,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",7,{"i":[{"n":"self"}],"o":{"g":["socketaddr"],"n":"result"}}],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",7,{"i":[{"n":"self"}],"o":{"g":["ucred"],"n":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",7,{"i":[{"n":"self"}],"o":{"g":["option"],"n":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,{"i":[{"n":"self"},{"n":"shutdown"}],"o":{"n":"result"}}],[11,"read","","",7,null],[11,"write","","",7,null],[11,"flush","","",7,{"i":[{"n":"self"}],"o":{"n":"result"}}],[11,"prepare_uninitialized_buffer","","",7,null],[11,"read_buf","","",7,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"shutdown","","",7,{"i":[{"n":"self"}],"o":{"g":["error"],"n":"poll"}}],[11,"write_buf","","",7,{"i":[{"n":"self"},{"n":"b"}],"o":{"g":["usize","error"],"n":"poll"}}],[11,"fmt","","",7,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}],[11,"as_raw_fd","","",7,{"i":[{"n":"self"}],"o":{"n":"rawfd"}}],[11,"poll","","",6,{"i":[{"n":"self"}],"o":{"g":["unixstream","error"],"n":"poll"}}],[11,"clone","","",0,{"i":[{"n":"self"}],"o":{"n":"ucred"}}],[11,"eq","","",0,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"ne","","",0,{"i":[{"n":"self"},{"n":"ucred"}],"o":{"n":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"i":[{"n":"self"},{"n":"formatter"}],"o":{"n":"result"}}]],"paths":[[3,"UCred"],[3,"UnixDatagram"],[3,"Incoming"],[3,"UnixListener"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ConnectFuture"],[3,"UnixStream"]]};
initSearch(searchIndex);
